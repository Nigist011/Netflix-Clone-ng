{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nigis\\\\Desktop\\\\Netflix\\\\netflix-ng\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmbd.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); //consol.log(request.data.results)\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    heighr: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || movie.original_name).then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow} \"row__posterLarge\"`,\n        src: `${base_url}${movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"40px\"\n      },\n      children: trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: trailerUrl,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"pxTa65Igp1Sf4ySdAY5MSbEZ/is=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/nigis/Desktop/Netflix/netflix-ng/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","heighr","width","playerVars","autoplay","handleClick","movie","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","backdrop_path","name","id","padding"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AACA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA2C;AAAA;;AAC3C,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBX,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB,CADuB,CAEvB;;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AAEZ,GATQ,EASN,CAACN,QAAD,CATM,CAAT;AAWA,QAAMW,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE;AADA;AAHH,GAAb;;AAOE,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAGb,UAAH,EAAc;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEM;AACJT,MAAAA,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAElB,KAAP,KAAgBkB,KAAK,CAACC,aAAvB,CAAZ,CACCC,IADD,CACOC,GAAD,IAAS;AACb,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAnB,QAAAA,aAAa,CAACgB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb;AACD,OAJD,EAKCiB,KALD,CAKQC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CALlB;AAMD;AACF,GAXD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAK3B;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACGG,MAAM,CAAC2B,GAAP,CAAYZ,KAAD,iBACV;AAEE,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAF5B;AAGE,QAAA,SAAS,EAAG,eAAchB,UAAY,qBAHxC;AAIE,QAAA,GAAG,EAAG,GAAEJ,QAAS,GACfoB,KAAK,CAACa,aACP,EANH;AAOE,QAAA,GAAG,EAAEb,KAAK,CAACc;AAPb,SACOd,KAAK,CAACe,EADb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eAeE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAZ;AAAA,gBACE7B,UAAU,iBAAI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEA,UAAlB;AAA8B,QAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA;AADhB;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GAvDQb,G;;KAAAA,G;AAyDT,eAAeA,GAAf","sourcesContent":["import React, {useState,useEffect } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmbd.org/t/p/original/\"; \r\nfunction Row({title, fetchUrl, isLargeRow}){\r\nconst [movies,setMovies] = useState([]);\r\nconst [trailerUrl, setTrailerUrl] = useState(\"\");\r\nuseEffect(() => {\r\n    async function fetchData() {\r\n        const request = await axios.get(fetchUrl);\r\n        //consol.log(request.data.results)\r\n        setMovies(request.data.results);\r\n        return request;\r\n    }\r\n    fetchData();\r\n\r\n}, [fetchUrl]);\r\n\r\nconst opts = {\r\n    heighr: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    }\r\n  }\r\n  const handleClick = (movie) => {\r\n    if(trailerUrl){\r\n      setTrailerUrl('')\r\n    }else {\r\n      movieTrailer(movie?.title || movie.original_name)\r\n      .then((url) => {\r\n        const urlParams = new URLSearchParams(new URL(url).search);\r\n        setTrailerUrl(urlParams.get('v'))\r\n      })\r\n      .catch((error) => console.log(error))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row__poster ${isLargeRow } \"row__posterLarge\"`}\r\n            src={`${base_url}${\r\n              movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div style={{ padding: \"40px\"}}>\r\n       {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}